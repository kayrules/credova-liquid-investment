---
import performanceData from '../../resources/api/portfolio/buyer_id/performance.json';
import { HiCurrencyDollar } from 'react-icons/hi';
import { FaChartLine, FaCoins, FaClipboardList } from 'react-icons/fa';

const summary = performanceData.summary;

const formatCurrency = (amount: number) => {
	return `RM ${amount.toLocaleString('en-MY', {
		minimumFractionDigits: 2,
		maximumFractionDigits: 2
	})}`;
};
---

<div class="px-4 pt-6">
	<!-- Summary Cards -->
	<div class="grid w-full grid-cols-1 gap-4 mb-4 md:grid-cols-2 xl:grid-cols-4">
		<!-- Total Invested Card -->
		<div class="items-center justify-between p-4 bg-white border border-gray-200 rounded-lg shadow-sm sm:flex dark:border-gray-700 sm:p-6 dark:bg-gray-800">
			<div class="w-full">
				<div class="flex items-center justify-between mb-2">
					<h3 class="text-base font-normal text-gray-500 dark:text-gray-400">Total Invested</h3>
					<div class="p-3 bg-blue-100 rounded-lg dark:bg-blue-900">
						<HiCurrencyDollar className="w-6 h-6 text-blue-600 dark:text-blue-400" client:only="react" />
					</div>
				</div>
				<span class="text-2xl font-bold leading-none text-gray-900 sm:text-3xl dark:text-white">
					{formatCurrency(summary.total_invested_rm)}
				</span>
				<p class="flex items-center text-base font-normal text-gray-500 dark:text-gray-400 mt-2">
					<span class="text-sm">Avg {summary.average_profit_rate_pa}% p.a.</span>
				</p>
			</div>
		</div>

		<!-- Portfolio Value Card -->
		<div class="items-center justify-between p-4 bg-white border border-gray-200 rounded-lg shadow-sm sm:flex dark:border-gray-700 sm:p-6 dark:bg-gray-800">
			<div class="w-full">
				<div class="flex items-center justify-between mb-2">
					<h3 class="text-base font-normal text-gray-500 dark:text-gray-400">Portfolio Value</h3>
					<div class="p-3 bg-green-100 rounded-lg dark:bg-green-900">
						<FaChartLine className="w-6 h-6 text-green-600 dark:text-green-400" client:only="react" />
					</div>
				</div>
				<span class="text-2xl font-bold leading-none text-gray-900 sm:text-3xl dark:text-white">
					{formatCurrency(summary.current_portfolio_value_rm)}
				</span>
				<p class="flex items-center text-base font-normal text-green-500 dark:text-green-400 mt-2">
					<svg class="w-4 h-4 mr-1" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
						<path fill-rule="evenodd" d="M5.293 7.707a1 1 0 010-1.414l4-4a1 1 0 011.414 0l4 4a1 1 0 01-1.414 1.414L11 5.414V17a1 1 0 11-2 0V5.414L6.707 7.707a1 1 0 01-1.414 0z" clip-rule="evenodd"></path>
					</svg>
					<span class="text-sm">+{formatCurrency(summary.total_profit_earned_rm)}</span>
				</p>
			</div>
		</div>

		<!-- Total Profit Earned Card -->
		<div class="items-center justify-between p-4 bg-white border border-gray-200 rounded-lg shadow-sm sm:flex dark:border-gray-700 sm:p-6 dark:bg-gray-800">
			<div class="w-full">
				<div class="flex items-center justify-between mb-2">
					<h3 class="text-base font-normal text-gray-500 dark:text-gray-400">Total Profit Earned</h3>
					<div class="p-3 bg-yellow-100 rounded-lg dark:bg-yellow-900">
						<FaCoins className="w-6 h-6 text-yellow-600 dark:text-yellow-400" client:only="react" />
					</div>
				</div>
				<span class="text-2xl font-bold leading-none text-gray-900 sm:text-3xl dark:text-white">
					{formatCurrency(summary.total_profit_earned_rm)}
				</span>
				<p class="flex items-center text-base font-normal text-gray-500 dark:text-gray-400 mt-2">
					<span class="text-sm">{summary.performance_period}</span>
				</p>
			</div>
		</div>

		<!-- Receivables Card -->
		<div class="items-center justify-between p-4 bg-white border border-gray-200 rounded-lg shadow-sm sm:flex dark:border-gray-700 sm:p-6 dark:bg-gray-800">
			<div class="w-full">
				<div class="flex items-center justify-between mb-2">
					<h3 class="text-base font-normal text-gray-500 dark:text-gray-400">Receivables</h3>
					<div class="p-3 bg-purple-100 rounded-lg dark:bg-purple-900">
						<FaClipboardList className="w-6 h-6 text-purple-600 dark:text-purple-400" client:only="react" />
					</div>
				</div>
				<div class="flex items-center justify-between mt-1">
					<div>
						<span class="text-xl font-bold leading-none text-gray-900 dark:text-white">
							{summary.active_receivables}
						</span>
						<p class="text-xs text-gray-500 dark:text-gray-400">Active</p>
					</div>
					<div class="text-right">
						<span class="text-xl font-bold leading-none text-gray-900 dark:text-white">
							{summary.completed_receivables}
						</span>
						<p class="text-xs text-gray-500 dark:text-gray-400">Completed</p>
					</div>
				</div>
				<p class="flex items-center text-base font-normal text-gray-500 dark:text-gray-400 mt-2">
					<span class="text-sm">Avg {summary.average_tenure_days} days tenure</span>
				</p>
			</div>
		</div>
	</div>

	<!-- Four Charts in 2x2 Grid -->
	<div class="grid gap-4 xl:grid-cols-2">
		<!-- Portfolio Value Chart -->
		<div
			class="p-4 bg-white border border-gray-200 rounded-lg shadow-sm sm:p-6 dark:border-gray-700 dark:bg-gray-800"
		>
			<div class="mb-4">
				<h3 class="text-lg font-semibold text-gray-900 dark:text-white mb-2">
					Portfolio Value
				</h3>
				<p class="text-sm text-gray-500 dark:text-gray-400">
					{performanceData.summary.performance_period}
				</p>
			</div>
			<div id="portfolio-value-chart"></div>
		</div>

		<!-- Monthly Profit Earned Chart -->
		<div
			class="p-4 bg-white border border-gray-200 rounded-lg shadow-sm sm:p-6 dark:border-gray-700 dark:bg-gray-800"
		>
			<div class="mb-4">
				<h3 class="text-lg font-semibold text-gray-900 dark:text-white mb-2">
					Monthly Profit Earned
				</h3>
				<p class="text-sm text-gray-500 dark:text-gray-400">
					{performanceData.summary.performance_period}
				</p>
			</div>
			<div id="monthly-profit-chart"></div>
		</div>

		<!-- Amount Invested Chart -->
		<div
			class="p-4 bg-white border border-gray-200 rounded-lg shadow-sm sm:p-6 dark:border-gray-700 dark:bg-gray-800"
		>
			<div class="mb-4">
				<h3 class="text-lg font-semibold text-gray-900 dark:text-white mb-2">
					Amount Invested
				</h3>
				<p class="text-sm text-gray-500 dark:text-gray-400">
					{performanceData.summary.performance_period}
				</p>
			</div>
			<div id="amount-invested-chart"></div>
		</div>

		<!-- Cumulative ROI Chart -->
		<div
			class="p-4 bg-white border border-gray-200 rounded-lg shadow-sm sm:p-6 dark:border-gray-700 dark:bg-gray-800"
		>
			<div class="mb-4">
				<h3 class="text-lg font-semibold text-gray-900 dark:text-white mb-2">
					Cumulative ROI
				</h3>
				<p class="text-sm text-gray-500 dark:text-gray-400">
					{performanceData.summary.performance_period}
				</p>
			</div>
			<div id="cumulative-roi-chart"></div>
		</div>
	</div>
</div>

<script>
	import ApexCharts from 'apexcharts';
	import performanceData from '../../resources/api/portfolio/buyer_id/performance.json';

	const getChartColors = () => {
		if (document.documentElement.classList.contains('dark')) {
			return {
				borderColor: '#374151',
				labelColor: '#9CA3AF',
			};
		} else {
			return {
				borderColor: '#F3F4F6',
				labelColor: '#6B7280',
			};
		}
	};

	const capitalData = performanceData.charts.capital_over_time;
	const profitData = performanceData.charts.profit_trend;

	// Amount Invested Chart (Area Chart)
	const getAmountInvestedChartOptions = () => {
		const chartColors = getChartColors();
		const dataset = capitalData.metrics.datasets[0]; // Amount Invested

		return {
			chart: {
				height: 350,
				type: 'area',
				fontFamily: 'Inter, sans-serif',
				foreColor: chartColors.labelColor,
				toolbar: {
					show: false,
				},
			},
			fill: {
				type: 'gradient',
				gradient: {
					enabled: true,
					opacityFrom: 0.45,
					opacityTo: 0,
				},
			},
			stroke: {
				width: 3,
				curve: 'smooth'
			},
			dataLabels: {
				enabled: false,
			},
			tooltip: {
				style: {
					fontSize: '14px',
					fontFamily: 'Inter, sans-serif',
				},
				y: {
					formatter: function (value) {
						return 'RM ' + value.toLocaleString('en-MY', { minimumFractionDigits: 2, maximumFractionDigits: 2 });
					},
				},
			},
			grid: {
				show: true,
				borderColor: chartColors.borderColor,
				strokeDashArray: 1,
				padding: {
					left: 35,
					bottom: 15,
				},
			},
			series: [{
				name: dataset.label,
				data: dataset.data,
				color: dataset.color,
			}],
			markers: {
				size: 5,
				strokeColors: '#ffffff',
				hover: {
					size: undefined,
					sizeOffset: 3,
				},
			},
			xaxis: {
				categories: capitalData.metrics.labels,
				labels: {
					style: {
						colors: [chartColors.labelColor],
						fontSize: '14px',
						fontWeight: 500,
					},
				},
				axisBorder: {
					color: chartColors.borderColor,
				},
				axisTicks: {
					color: chartColors.borderColor,
				},
			},
			yaxis: {
				labels: {
					style: {
						colors: [chartColors.labelColor],
						fontSize: '14px',
						fontWeight: 500,
					},
					formatter: function (value) {
						return 'RM ' + value.toLocaleString('en-MY', { minimumFractionDigits: 0, maximumFractionDigits: 0 });
					},
				},
			},
			legend: {
				show: false,
			},
			responsive: [
				{
					breakpoint: 1024,
					options: {
						xaxis: {
							labels: {
								show: false,
							},
						},
					},
				},
			],
		};
	};

	// Portfolio Value Chart (Area Chart)
	const getPortfolioValueChartOptions = () => {
		const chartColors = getChartColors();
		const dataset = capitalData.metrics.datasets[1]; // Portfolio Value

		return {
			chart: {
				height: 350,
				type: 'area',
				fontFamily: 'Inter, sans-serif',
				foreColor: chartColors.labelColor,
				toolbar: {
					show: false,
				},
			},
			fill: {
				type: 'gradient',
				gradient: {
					enabled: true,
					opacityFrom: 0.45,
					opacityTo: 0,
				},
			},
			stroke: {
				width: 3,
				curve: 'smooth'
			},
			dataLabels: {
				enabled: false,
			},
			tooltip: {
				style: {
					fontSize: '14px',
					fontFamily: 'Inter, sans-serif',
				},
				y: {
					formatter: function (value) {
						return 'RM ' + value.toLocaleString('en-MY', { minimumFractionDigits: 2, maximumFractionDigits: 2 });
					},
				},
			},
			grid: {
				show: true,
				borderColor: chartColors.borderColor,
				strokeDashArray: 1,
				padding: {
					left: 35,
					bottom: 15,
				},
			},
			series: [{
				name: dataset.label,
				data: dataset.data,
				color: dataset.color,
			}],
			markers: {
				size: 5,
				strokeColors: '#ffffff',
				hover: {
					size: undefined,
					sizeOffset: 3,
				},
			},
			xaxis: {
				categories: capitalData.metrics.labels,
				labels: {
					style: {
						colors: [chartColors.labelColor],
						fontSize: '14px',
						fontWeight: 500,
					},
				},
				axisBorder: {
					color: chartColors.borderColor,
				},
				axisTicks: {
					color: chartColors.borderColor,
				},
			},
			yaxis: {
				labels: {
					style: {
						colors: [chartColors.labelColor],
						fontSize: '14px',
						fontWeight: 500,
					},
					formatter: function (value) {
						return 'RM ' + value.toLocaleString('en-MY', { minimumFractionDigits: 0, maximumFractionDigits: 0 });
					},
				},
			},
			legend: {
				show: false,
			},
			responsive: [
				{
					breakpoint: 1024,
					options: {
						xaxis: {
							labels: {
								show: false,
							},
						},
					},
				},
			],
		};
	};

	// Monthly Profit Earned Chart (Bar Chart)
	const getMonthlyProfitChartOptions = () => {
		const chartColors = getChartColors();
		const dataset = profitData.metrics.datasets[0]; // Monthly Profit Earned

		return {
			chart: {
				height: 350,
				type: 'bar',
				fontFamily: 'Inter, sans-serif',
				foreColor: chartColors.labelColor,
				toolbar: {
					show: false,
				},
			},
			plotOptions: {
				bar: {
					columnWidth: '50%',
					borderRadius: 3,
				},
			},
			dataLabels: {
				enabled: false,
			},
			tooltip: {
				style: {
					fontSize: '14px',
					fontFamily: 'Inter, sans-serif',
				},
				y: {
					formatter: function (value) {
						return 'RM ' + value.toLocaleString('en-MY', { minimumFractionDigits: 2, maximumFractionDigits: 2 });
					},
				},
			},
			grid: {
				show: true,
				borderColor: chartColors.borderColor,
				strokeDashArray: 1,
				padding: {
					left: 35,
					bottom: 15,
				},
			},
			series: [{
				name: dataset.label,
				data: dataset.data,
				color: dataset.color,
			}],
			xaxis: {
				categories: profitData.metrics.labels,
				labels: {
					style: {
						colors: [chartColors.labelColor],
						fontSize: '14px',
						fontWeight: 500,
					},
				},
				axisBorder: {
					color: chartColors.borderColor,
				},
				axisTicks: {
					color: chartColors.borderColor,
				},
			},
			yaxis: {
				labels: {
					style: {
						colors: [chartColors.labelColor],
						fontSize: '14px',
						fontWeight: 500,
					},
					formatter: function (value) {
						return 'RM ' + value.toLocaleString('en-MY', { minimumFractionDigits: 0, maximumFractionDigits: 0 });
					},
				},
			},
			legend: {
				show: false,
			},
			responsive: [
				{
					breakpoint: 1024,
					options: {
						xaxis: {
							labels: {
								show: false,
							},
						},
					},
				},
			],
		};
	};

	// Cumulative ROI Chart (Line Chart)
	const getCumulativeROIChartOptions = () => {
		const chartColors = getChartColors();
		const dataset = profitData.metrics.datasets[1]; // Cumulative ROI

		return {
			chart: {
				height: 350,
				type: 'line',
				fontFamily: 'Inter, sans-serif',
				foreColor: chartColors.labelColor,
				toolbar: {
					show: false,
				},
			},
			stroke: {
				width: 3,
				curve: 'smooth'
			},
			dataLabels: {
				enabled: false,
			},
			tooltip: {
				style: {
					fontSize: '14px',
					fontFamily: 'Inter, sans-serif',
				},
				y: {
					formatter: function (value) {
						return value.toFixed(2) + '%';
					},
				},
			},
			grid: {
				show: true,
				borderColor: chartColors.borderColor,
				strokeDashArray: 1,
				padding: {
					left: 35,
					bottom: 15,
				},
			},
			series: [{
				name: dataset.label,
				data: dataset.data,
				color: dataset.color,
			}],
			markers: {
				size: 5,
				strokeColors: '#ffffff',
				hover: {
					size: undefined,
					sizeOffset: 3,
				},
			},
			xaxis: {
				categories: profitData.metrics.labels,
				labels: {
					style: {
						colors: [chartColors.labelColor],
						fontSize: '14px',
						fontWeight: 500,
					},
				},
				axisBorder: {
					color: chartColors.borderColor,
				},
				axisTicks: {
					color: chartColors.borderColor,
				},
			},
			yaxis: {
				labels: {
					style: {
						colors: [chartColors.labelColor],
						fontSize: '14px',
						fontWeight: 500,
					},
					formatter: function (value) {
						return value.toFixed(1) + '%';
					},
				},
			},
			legend: {
				show: false,
			},
			responsive: [
				{
					breakpoint: 1024,
					options: {
						xaxis: {
							labels: {
								show: false,
							},
						},
					},
				},
			],
		};
	};

	// Initialize all charts
	if (typeof ApexCharts !== 'undefined') {
		// Amount Invested Chart
		if (document.getElementById('amount-invested-chart')) {
			const amountInvestedChart = new ApexCharts(
				document.getElementById('amount-invested-chart'),
				getAmountInvestedChartOptions()
			);
			amountInvestedChart.render();
		}

		// Portfolio Value Chart
		if (document.getElementById('portfolio-value-chart')) {
			const portfolioValueChart = new ApexCharts(
				document.getElementById('portfolio-value-chart'),
				getPortfolioValueChartOptions()
			);
			portfolioValueChart.render();
		}

		// Monthly Profit Chart
		if (document.getElementById('monthly-profit-chart')) {
			const monthlyProfitChart = new ApexCharts(
				document.getElementById('monthly-profit-chart'),
				getMonthlyProfitChartOptions()
			);
			monthlyProfitChart.render();
		}

		// Cumulative ROI Chart
		if (document.getElementById('cumulative-roi-chart')) {
			const cumulativeROIChart = new ApexCharts(
				document.getElementById('cumulative-roi-chart'),
				getCumulativeROIChartOptions()
			);
			cumulativeROIChart.render();
		}
	}
</script>
