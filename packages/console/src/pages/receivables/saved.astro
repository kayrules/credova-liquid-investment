---
import LayoutSidebar from '../../app/LayoutSidebar.astro';
import { IoWalletOutline } from 'react-icons/io5';
import { PiFilePdfDuotone } from 'react-icons/pi';

// Import all receivables data to filter by bookmarks
import availableData from '../../../resources/api/receivables/available.json';
import upcomingData from '../../../resources/api/receivables/upcoming.json';
import pendingData from '../../../resources/api/receivables/pending-approve.json';

const allReceivables = [
	...availableData.data.available,
	...upcomingData.data.upcoming,
	...pendingData.data.pending_approve
];
---

<LayoutSidebar>
		<div class="p-4 bg-white block sm:flex items-center justify-between border-b border-gray-200 lg:mt-1.5 dark:bg-gray-800 dark:border-gray-700">
			<div class="w-full mb-1">
				<div class="mb-4">
					<h1 class="text-xl font-semibold text-gray-900 sm:text-2xl dark:text-white">
						Saved Receivables
					</h1>
					<p class="text-sm text-gray-500 dark:text-gray-400 mt-1">
						Your bookmarked receivables for quick access
					</p>
				</div>
				<div class="sm:flex">
					<div class="items-center hidden mb-3 sm:flex sm:divide-x sm:divide-gray-100 sm:mb-0 dark:divide-gray-700">
						<form class="lg:pr-3" action="#" method="GET">
							<label for="receivables-search" class="sr-only">Search</label>
							<div class="relative mt-1 lg:w-64 xl:w-96">
								<input
									type="text"
									name="email"
									id="receivables-search"
									class="bg-gray-50 border border-gray-300 text-gray-900 sm:text-sm rounded-lg focus:ring-primary-500 focus:border-primary-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500"
									placeholder="Search financing code..."
								/>
							</div>
						</form>
					</div>
					<div class="flex items-center ml-auto space-x-2 sm:space-x-3">
						<button
							type="button"
							class="inline-flex items-center justify-center w-1/2 px-3 py-2 text-sm font-medium text-center text-gray-900 bg-white border border-gray-300 rounded-lg hover:bg-gray-100 focus:ring-4 focus:ring-primary-300 sm:w-auto dark:bg-gray-800 dark:text-gray-400 dark:border-gray-600 dark:hover:text-white dark:hover:bg-gray-700 dark:focus:ring-gray-700"
						>
							<svg
								class="w-5 h-5 mr-2 -ml-1"
								fill="currentColor"
								viewBox="0 0 20 20"
								xmlns="http://www.w3.org/2000/svg"
							>
								<path
									fill-rule="evenodd"
									d="M3 3a1 1 0 011-1h12a1 1 0 011 1v3a1 1 0 01-.293.707L12 11.414V15a1 1 0 01-.293.707l-2 2A1 1 0 018 17v-5.586L3.293 6.707A1 1 0 013 6V3z"
									clip-rule="evenodd"
								></path>
							</svg>
							Filter
						</button>
						<button
							type="button"
							class="inline-flex items-center justify-center w-1/2 px-3 py-2 text-sm font-medium text-center text-white rounded-lg bg-primary-700 hover:bg-primary-800 focus:ring-4 focus:ring-primary-300 sm:w-auto dark:bg-primary-600 dark:hover:bg-primary-700 dark:focus:ring-primary-800"
						>
							<svg
								class="w-5 h-5 mr-2 -ml-1"
								fill="currentColor"
								viewBox="0 0 20 20"
								xmlns="http://www.w3.org/2000/svg"
							>
								<path
									d="M4 3a2 2 0 100 4h12a2 2 0 100-4H4z"
								></path>
								<path
									fill-rule="evenodd"
									d="M3 8h14v7a2 2 0 01-2 2H5a2 2 0 01-2-2V8zm5 3a1 1 0 011-1h2a1 1 0 110 2H9a1 1 0 01-1-1z"
									clip-rule="evenodd"
								></path>
							</svg>
							Refresh
						</button>
					</div>
				</div>
			</div>
		</div>
		<div class="flex flex-col">
			<div class="overflow-x-auto">
				<div class="inline-block min-w-full align-middle">
					<div class="overflow-hidden shadow">
						<div class="p-6 bg-transparent">
							<div class="grid grid-cols-1 gap-8 sm:grid-cols-2 lg:grid-cols-3" id="saved-receivables-container">
								{allReceivables.map((receivable) => (
									<div
										class="saved-receivable-card group p-5 bg-white border border-gray-200 rounded-xl dark:bg-gray-800 dark:border-gray-700 hover:shadow-xl hover:border-primary-500 hover:scale-[1.02] transition-all duration-300 cursor-pointer"
										data-receivable-id={receivable.id}
										style="display: none;"
									>
										<div class="flex items-center justify-between mb-4">
											<div class="flex items-center gap-2">
												<button
													data-receivable-id={receivable.id}
													class="bookmark-btn p-1 hover:bg-gray-100 dark:hover:bg-gray-700 rounded transition-colors"
													title="Bookmark"
												>
													<svg class="w-5 h-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
														<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 5a2 2 0 012-2h10a2 2 0 012 2v16l-7-3.5L5 21V5z"></path>
													</svg>
												</button>
												<span class="text-xs font-medium text-gray-600 dark:text-gray-400">{receivable.id}</span>
											</div>
											<span class={`px-2.5 py-0.5 text-xs font-medium rounded ${
												receivable.status.code === 'AVAILABLE'
													? 'text-green-800 bg-green-100 dark:bg-green-900 dark:text-green-300'
													: receivable.status.code === 'UPCOMING'
													? 'text-purple-800 bg-purple-100 dark:bg-purple-900 dark:text-purple-300'
													: 'text-gray-800 bg-gray-100 dark:bg-gray-900 dark:text-gray-300'
											}`}>
												{receivable.status.label}
											</span>
										</div>

										{/* Highlighted: Asset Type & Branch */}
										<div class="mb-4 pb-4 border-b border-gray-100 dark:border-gray-700 flex items-start justify-between gap-3">
											<div class="flex-1">
												<h3 class="text-lg font-bold text-gray-900 dark:text-white mb-1">
													{receivable.asset.type}
												</h3>
												<p class="text-sm text-gray-500 dark:text-gray-400">
													{receivable.branch}
												</p>
											</div>
											<div class="hidden group-hover:flex gap-2 flex-shrink-0 mt-2">
												{receivable.actions.buy_now_enabled && (
													<button
														type="button"
														class="inline-flex items-center justify-center gap-2 text-white bg-primary-700 hover:bg-primary-800 focus:ring-4 focus:ring-primary-300 font-medium rounded-lg text-sm px-4 py-2.5 dark:bg-primary-600 dark:hover:bg-primary-700 dark:focus:ring-primary-800"
													>
														<IoWalletOutline
															className="w-5 h-5"
															client:only="react"
														/>
														Invest
													</button>
												)}
												<a
													href={receivable.actions.view_details_url}
													class="inline-flex items-center justify-center p-2.5 text-red-600 bg-white border border-gray-300 rounded-lg hover:bg-gray-100 focus:ring-4 focus:ring-gray-200 dark:bg-gray-800 dark:text-red-500 dark:border-gray-600 dark:hover:bg-gray-700 dark:focus:ring-gray-700"
													title="View Details"
												>
													<PiFilePdfDuotone
														className="w-5 h-5"
														client:only="react"
													/>
												</a>
											</div>
										</div>

										{/* Most Important: Investment Amount & Returns */}
										<div class="mb-4 p-3 bg-primary-50 dark:bg-primary-900/20 rounded-lg">
											<div class="flex justify-between items-center mb-2">
												<span class="text-sm font-medium text-gray-700 dark:text-gray-300">Investment</span>
												<span class="text-xl font-bold text-gray-900 dark:text-white">RM {receivable.purchase_price_rm.toFixed(2)}</span>
											</div>
											<div class="flex justify-between items-center">
												<span class="text-sm font-medium text-gray-700 dark:text-gray-300">Expected Return</span>
												<span class="text-xl font-bold text-primary-600 dark:text-primary-400">RM {receivable.expected_return_rm.toFixed(2)}</span>
											</div>
										</div>

										{/* Key Details */}
										<div class="space-y-2.5 text-sm mb-4">
											<div class="flex justify-between items-center">
												<span class="text-gray-600 dark:text-gray-400">Profit Rate (p.a.)</span>
												<span class="font-semibold text-primary-600 dark:text-primary-400">{receivable.profit_rate_pa}%</span>
											</div>
											<div class="flex justify-between items-center">
												<span class="text-gray-600 dark:text-gray-400">Tenure</span>
												<span class="font-semibold text-gray-900 dark:text-white">{receivable.tenure_days} days</span>
											</div>
											<div class="flex justify-between items-center">
												<span class="text-gray-600 dark:text-gray-400">Weight</span>
												<span class="font-medium text-gray-700 dark:text-gray-300">{receivable.asset.weight_gram}g</span>
											</div>
											<div class="flex justify-between items-center">
												<span class="text-gray-600 dark:text-gray-400">Collateral Value</span>
												<span class="font-medium text-gray-700 dark:text-gray-300">RM {receivable.asset.appraised_value_rm.toFixed(2)}</span>
											</div>
											<div class="flex justify-between items-center">
												<span class="text-gray-600 dark:text-gray-400">Maturity Date</span>
												<span class="font-medium text-gray-700 dark:text-gray-300">{receivable.maturity_date}</span>
											</div>
										</div>
									</div>
								))}
								<div id="no-saved-message" class="col-span-full text-center py-12">
									<p class="text-gray-500 dark:text-gray-400">No saved receivables yet. Browse the marketplace and bookmark your favorites!</p>
								</div>
							</div>
						</div>
					</div>
				</div>
			</div>
		</div>
</LayoutSidebar>

<script>
	// Initialize bookmarks
	function initBookmarks() {
		const bookmarkedIds = JSON.parse(sessionStorage.getItem('bookmarkedReceivables') || '[]');

		// Update all bookmark buttons
		function updateBookmarkButtons() {
			const buttons = document.querySelectorAll('.bookmark-btn');
			buttons.forEach(btn => {
				const id = btn.getAttribute('data-receivable-id');
				const svg = btn.querySelector('svg');
				if (bookmarkedIds.includes(id)) {
					// Filled bookmark (gold)
					svg.innerHTML = '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 5a2 2 0 012-2h10a2 2 0 012 2v16l-7-3.5L5 21V5z" fill="currentColor"></path>';
					svg.classList.remove('text-gray-400');
					svg.classList.add('text-yellow-500');
				} else {
					// Outline bookmark (grey)
					svg.innerHTML = '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 5a2 2 0 012-2h10a2 2 0 012 2v16l-7-3.5L5 21V5z"></path>';
					svg.classList.remove('text-yellow-500');
					svg.classList.add('text-gray-400');
				}
			});
		}

		// Add click handlers
		document.querySelectorAll('.bookmark-btn').forEach(btn => {
			btn.addEventListener('click', (e) => {
				e.preventDefault();
				e.stopPropagation();

				const id = btn.getAttribute('data-receivable-id');
				const index = bookmarkedIds.indexOf(id);

				if (index > -1) {
					bookmarkedIds.splice(index, 1);
				} else {
					bookmarkedIds.push(id);
				}

				sessionStorage.setItem('bookmarkedReceivables', JSON.stringify(bookmarkedIds));
				updateBookmarkButtons();
				updateSavedCards();
			});
		});

		updateBookmarkButtons();
	}

	// Client-side script to show/hide cards based on bookmarks
	function updateSavedCards() {
		const bookmarked = JSON.parse(sessionStorage.getItem('bookmarkedReceivables') || '[]');
		const cards = document.querySelectorAll('.saved-receivable-card');
		const noSavedMessage = document.getElementById('no-saved-message');

		let visibleCount = 0;

		cards.forEach((card) => {
			const receivableId = card.getAttribute('data-receivable-id');
			if (bookmarked.includes(receivableId)) {
				card.style.display = 'block';
				visibleCount++;
			} else {
				card.style.display = 'none';
			}
		});

		if (noSavedMessage) {
			noSavedMessage.style.display = visibleCount > 0 ? 'none' : 'block';
		}
	}

	// Initialize on page load
	initBookmarks();
	updateSavedCards();

	// Listen for storage changes (when bookmarks are toggled)
	window.addEventListener('storage', updateSavedCards);

	// Poll for changes since storage events don't fire in same window
	setInterval(updateSavedCards, 500);
</script>
